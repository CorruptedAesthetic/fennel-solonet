name: Test Bootnode Injection

# This workflow tests only the bootnode injection functionality
# without building the full runtime, for faster testing
on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: ['test-bootnodes']  # Trigger on test branch

# Use the same centralized bootnode configuration as the main workflow
env:
  EXTERNAL_BOOTNODES: |
    [
      "/dns4/bootnode1.fennel.network/tcp/30333/p2p/12D3KooWDCZGrnJhsgWJtDcs6eZc1hUBrVj5QqkEWggAkNVowRAi",
      "/dns4/bootnode2.fennel.network/tcp/30333/p2p/12D3KooWDbfFv6oepAXmQaiwFaVjD9g7AxowQ8LQdWTcVYpKhnAx"
    ]
  INTERNAL_BOOTNODES: |
    [
      "/dns4/fennel-bootnode-1.fennel-staging.svc.cluster.local/tcp/30333/p2p/12D3KooWDCZGrnJhsgWJtDcs6eZc1hUBrVj5QqkEWggAkNVowRAi",
      "/dns4/fennel-bootnode-2.fennel-staging.svc.cluster.local/tcp/30333/p2p/12D3KooWDbfFv6oepAXmQaiwFaVjD9g7AxowQ8LQdWTcVYpKhnAx"
    ]

jobs:
  test-bootnode-injection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "‚úÖ Installed jq"

      - name: Create mock chain specs for testing
        run: |
          set -euo pipefail
          
          echo "üß™ Creating mock chain specifications for testing..."
          
          # Create directory structure
          mkdir -p chainspecs/{development,staging}
          
          # Create mock development chain spec
          cat > chainspecs/development/development.json << 'EOF'
          {
            "name": "Fennel Development",
            "id": "fennel_dev",
            "chainType": "Development",
            "genesis": {
              "raw": {
                "top": {}
              }
            },
            "properties": {
              "tokenDecimals": 18,
              "tokenSymbol": "FNL"
            },
            "consensusEngine": null,
            "lightSyncState": null,
            "codeSubstitutes": {},
            "forkBlocks": null,
            "badBlocks": null,
            "telemetryEndpoints": null
          }
          EOF
          
          # Create mock staging chain spec
          cat > chainspecs/staging/staging-chainspec.json << 'EOF'
          {
            "name": "Fennel Staging",
            "id": "fennel_staging",
            "chainType": "Live",
            "genesis": {
              "raw": {
                "top": {}
              }
            },
            "properties": {
              "tokenDecimals": 18,
              "tokenSymbol": "FNL"
            },
            "consensusEngine": null,
            "lightSyncState": null,
            "codeSubstitutes": {},
            "forkBlocks": null,
            "badBlocks": null,
            "telemetry_endpoints": null
          }
          EOF
          
          echo "‚úÖ Mock chain specs created"

      - name: Test bootnode injection - Development
        run: |
          set -euo pipefail
          
          echo "üîó Testing bootnode injection for development spec..."
          
          SPEC="chainspecs/development/development.json"
          
          # Merge external and internal bootnodes using jq (same as main workflow)
          ALL_BOOTNODES=$(jq -c -n \
            --argjson ext "$EXTERNAL_BOOTNODES" \
            --argjson int "$INTERNAL_BOOTNODES" \
            '$ext + $int')
          
          # Test idempotent behavior - first injection
          echo "üìù First injection (should update)..."
          CURRENT_BOOTNODES=$(jq -c '.bootNodes // []' "$SPEC")
          if [ "$CURRENT_BOOTNODES" != "$ALL_BOOTNODES" ]; then
            echo "üìù Updating bootNodes in development chain spec..."
            jq --argjson arr "$ALL_BOOTNODES" '.bootNodes = $arr' "$SPEC" > tmp.json && mv tmp.json "$SPEC"
            echo "‚úÖ Bootnodes updated successfully"
          else
            echo "‚úÖ No changes needed - bootnodes already up to date"
          fi
          
          # Test idempotent behavior - second injection (should be no-op)
          echo "üìù Second injection (should be no-op)..."
          CURRENT_BOOTNODES=$(jq -c '.bootNodes // []' "$SPEC")
          if [ "$CURRENT_BOOTNODES" != "$ALL_BOOTNODES" ]; then
            echo "‚ùå Idempotent test failed - bootnodes changed on second run"
            exit 1
          else
            echo "‚úÖ Idempotent test passed - no changes on second run"
          fi
          
          # Verify total count (2 external + 2 internal = 4)
          BOOTNODE_COUNT=$(jq '.bootNodes | length' "$SPEC")
          if [ "$BOOTNODE_COUNT" -eq 4 ]; then
            echo "‚úÖ Correct number of bootnodes: $BOOTNODE_COUNT (2 external + 2 internal)"
          else
            echo "‚ùå Expected 4 bootnodes, found: $BOOTNODE_COUNT"
            exit 1
          fi
          
          echo "üìä Updated development chain spec structure:"
          jq 'keys' "$SPEC"

      - name: Test bootnode injection - Staging
        run: |
          set -euo pipefail
          
          echo "üîó Testing bootnode injection for staging spec..."
          
          SPEC="chainspecs/staging/staging-chainspec.json"
          
          # Merge external and internal bootnodes using jq (same as main workflow)
          ALL_BOOTNODES=$(jq -c -n \
            --argjson ext "$EXTERNAL_BOOTNODES" \
            --argjson int "$INTERNAL_BOOTNODES" \
            '$ext + $int')
          
          # Test idempotent behavior - first injection
          echo "üìù First injection (should update)..."
          CURRENT_BOOTNODES=$(jq -c '.bootNodes // []' "$SPEC")
          if [ "$CURRENT_BOOTNODES" != "$ALL_BOOTNODES" ]; then
            echo "üìù Updating bootNodes in staging chain spec..."
            jq --argjson arr "$ALL_BOOTNODES" '.bootNodes = $arr' "$SPEC" > tmp.json && mv tmp.json "$SPEC"
            echo "‚úÖ Bootnodes updated successfully"
          else
            echo "‚úÖ No changes needed - bootnodes already up to date"
          fi
          
          # Test idempotent behavior - second injection (should be no-op)
          echo "üìù Second injection (should be no-op)..."
          CURRENT_BOOTNODES=$(jq -c '.bootNodes // []' "$SPEC")
          if [ "$CURRENT_BOOTNODES" != "$ALL_BOOTNODES" ]; then
            echo "‚ùå Idempotent test failed - bootnodes changed on second run"
            exit 1
          else
            echo "‚úÖ Idempotent test passed - no changes on second run"
          fi
          
          # Verify total count (2 external + 2 internal = 4)
          BOOTNODE_COUNT=$(jq '.bootNodes | length' "$SPEC")
          if [ "$BOOTNODE_COUNT" -eq 4 ]; then
            echo "‚úÖ Correct number of bootnodes: $BOOTNODE_COUNT (2 external + 2 internal)"
          else
            echo "‚ùå Expected 4 bootnodes, found: $BOOTNODE_COUNT"
            exit 1
          fi
          
          echo "üìä Updated staging chain spec structure:"
          jq 'keys' "$SPEC"

      - name: Validate bootnode format
        run: |
          set -euo pipefail
          
          echo "üîç Validating bootnode multiaddress format..."
          
          # Check development spec
          echo "Checking development bootnodes:"
          jq -r '.bootNodes[]' chainspecs/development/development.json | while IFS= read -r bootnode; do
            if [[ $bootnode =~ ^/dns4/bootnode[12]\.fennel\.network/tcp/30333/p2p/12D3KooW[A-Za-z0-9]+$ ]]; then
              echo "‚úÖ Valid external bootnode: $bootnode"
            elif [[ $bootnode =~ ^/dns4/fennel-bootnode-[12]\.fennel-staging\.svc\.cluster\.local/tcp/30333/p2p/12D3KooW[A-Za-z0-9]+$ ]]; then
              echo "‚úÖ Valid internal bootnode: $bootnode"
            else
              echo "‚ùå Invalid bootnode format: $bootnode"
              exit 1
            fi
          done
          
          # Check staging spec
          echo "Checking staging bootnodes:"
          jq -r '.bootNodes[]' chainspecs/staging/staging-chainspec.json | while IFS= read -r bootnode; do
            if [[ $bootnode =~ ^/dns4/bootnode[12]\.fennel\.network/tcp/30333/p2p/12D3KooW[A-Za-z0-9]+$ ]]; then
              echo "‚úÖ Valid external bootnode: $bootnode"
            elif [[ $bootnode =~ ^/dns4/fennel-bootnode-[12]\.fennel-staging\.svc\.cluster\.local/tcp/30333/p2p/12D3KooW[A-Za-z0-9]+$ ]]; then
              echo "‚úÖ Valid internal bootnode: $bootnode"
            else
              echo "‚ùå Invalid bootnode format: $bootnode"
              exit 1
            fi
          done
          
          # Verify we have both types of bootnodes
          echo "üîç Verifying bootnode type distribution..."
          
          for spec in "chainspecs/development/development.json" "chainspecs/staging/staging-chainspec.json"; do
            EXTERNAL_COUNT=$(jq -r '.bootNodes[]' "$spec" | grep -c "fennel\.network" || echo 0)
            INTERNAL_COUNT=$(jq -r '.bootNodes[]' "$spec" | grep -c "svc\.cluster\.local" || echo 0)
            
            if [ "$EXTERNAL_COUNT" -eq 2 ] && [ "$INTERNAL_COUNT" -eq 2 ]; then
              echo "‚úÖ $(basename "$spec"): Correct distribution - $EXTERNAL_COUNT external, $INTERNAL_COUNT internal"
            else
              echo "‚ùå $(basename "$spec"): Wrong distribution - $EXTERNAL_COUNT external, $INTERNAL_COUNT internal (expected 2 each)"
              exit 1
            fi
          done
          
          echo "üéâ All bootnode formats and distributions are valid!"

      - name: Display final results
        run: |
          echo "üìã Final Chain Spec Results:"
          echo "============================"
          
          echo -e "\nüîß Development Chain Spec:"
          jq '.' chainspecs/development/development.json
          
          echo -e "\nüè≠ Staging Chain Spec:"
          jq '.' chainspecs/staging/staging-chainspec.json

      - name: Upload test results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-chainspecs-with-bootnodes
          path: |
            chainspecs/development/development.json
            chainspecs/staging/staging-chainspec.json 